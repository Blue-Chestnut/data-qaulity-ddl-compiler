#[cfg(test)]
pub const PYSPARK_CLASS_EXPECTED_TEST_1: &str = "\
from warnings import warn
from typing import (
    Tuple,
    Union,
    List
)

from py4j.java_gateway import JavaObject
from pyspark.sql import DataFrame
from pyspark.sql.context import SQLContext
from pyspark.sql.session import SparkSession
from pyspark.sql.column import Column
from pyspark.sql.types import StructField, StructType, IntegerType, FloatType, StringType, DoubleType
from pyspark.sql.types import _parse_datatype_string


class SchemaTest(DataFrame):
    \"\"\"
    Autogenerated subclass for DataFrame for table SchemaTest
    \"\"\"

    def __init__(self, jdf: JavaObject, sql_ctx: SQLContext | SparkSession):
        super().__init__(jdf, sql_ctx)

        self.id_col = self._jdf.apply(\"IdCol\")
        self.price = self._jdf.apply(\"Price\")
        self.test = self._jdf.apply(\"Test\")
        
        self._schema = StructType(sorted([
            StructField(\"IdCol\", _parse_datatype_string(\"String\"), False),
            StructField(\"Price\", _parse_datatype_string(\"String\"), True),
            StructField(\"Test\", _parse_datatype_string(\"Float\"), True),
            ], key=lambda x: x.name))
        self._columns = sorted([\"IdCol\",\"Price\",\"Test\",])

    def __getitem__(self, item: Union[int, str, Column, List, Tuple]) -> Union[Column, \"DataFrame\"]:
        \"\"\"Returns the column as a :class:`Column`.

        .. versionadded:: 1.3.0

        Examples
        --------
        >>> df.select(df['age']).collect()
        [Row(age=2), Row(age=5)]
        >>> df[[\"name\", \"age\"]].collect()
        [Row(name='Alice', age=2), Row(name='Bob', age=5)]
        >>> df[df.age > 3 ].collect()
        [Row(age=5, name='Bob')]
        >>> df[df[0] > 3].collect()
        [Row(age=5, name='Bob')]
        \"\"\"

        if isinstance(item, str):
            if item in self.columns:
                warn(f\"Accessing column {item} via getitem, use column\"
                     f\" directly instead (e.g. data_frame.{item}).\")

        return super().__getitem__(item)

    @staticmethod
    def load_from_df(data_frame: DataFrame):
        \"\"\"
        Load data from DataFrame
        \"\"\"
        new_df = SchemaTest(data_frame._jdf, data_frame.sql_ctx)
        assert new_df._columns == sorted(data_frame.columns), (f\"Column names for table Example \"
                                                               f\"need to be {new_df.columns}\")
        ordered_schema = sorted(data_frame.schema.fields, key=lambda x: x.name)

        assert new_df._schema.fields == ordered_schema, (f\"Schema for table Example \"
                                                         f\"need to be {new_df.schema}\")
        return new_df
";
