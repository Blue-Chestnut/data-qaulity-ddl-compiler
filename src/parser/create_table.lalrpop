use crate::model::table_expr::{TableDef, ColumnDef, DataType, TableRef};
use crate::model::column_rule::{ColumnRule, ContainsValue, LikePattern, RegexPattern, NotEmpty, Uniqueness};
use crate::model::rule_filter::filter::ColumnRuleFilter;

grammar;

pub CreateTableExpr: Box<TableDef> = {
    CreateTableString <n:TableNameExpr> "{" <cols:Comma<ColumnWithRulesExpr>> "}" ";" =>
        Box::new(TableDef{table_ref: n, columns: cols})
};

pub TableNameExpr: TableRef = {
    <n:Identifier> <a: Text?> => TableRef {table_name: n, alias: a, ..Default::default()},
    <s:Identifier> "." <t:Identifier> <a: Text?> => TableRef {table_name: t, schema_name: Some(s), alias: a},
}

pub ColumnWithRulesExpr: ColumnDef = {
    #[precedence(level="0")]
    <c:ColumnDefExpr> "{" <rules:Comma<ColumnRuleExpr>> "}" => ColumnDef::new_with_rules_and_filter(c.name, c.data_type,
            c.not_null, c.primary_key, rules),
    #[precedence(level="1")]
    <c:ColumnDefExpr> => c
};

pub ColumnDefExpr: ColumnDef = {
    <n:Identifier> <d:DataTypeExpr> => ColumnDef::new(n, d, false, false),
    <n:Identifier> <d:DataTypeExpr> r"(?i)NOT NULL" => ColumnDef::new(n, d, true, false),
    <n:Identifier> <d:DataTypeExpr> r"(?i)PRIMARY KEY" => ColumnDef::new(n, d, true, true),
};

pub ColumnRuleExpr: ColumnRuleFilter = {
    r"(?i)-REGEX" <p:Text> <t:DecimalPercent?> <f:FilterTerm?> => ColumnRuleFilter::from_rule(f, ColumnRule::RegexPattern(RegexPattern::new(None, p, None, t))),
    r"(?i)-LIKE" <p:Text> <t:DecimalPercent?> <f:FilterTerm?> => ColumnRuleFilter::from_rule(f, ColumnRule::LikePattern(LikePattern::new(None, p, None, t))),
    r"(?i)-CONTAINS" <p:Text> <t:DecimalPercent?> <f:FilterTerm?> => ColumnRuleFilter::from_rule(f, ColumnRule::ContainsValue(ContainsValue::new(None, p, None, t))),
    r"(?i)-NOT_EMPTY" <t:DecimalPercent?> <f:FilterTerm?> => ColumnRuleFilter::from_rule(f, ColumnRule::NotEmpty(NotEmpty::new(None, None, t))),
    r"(?i)-UNIQUE" <f:FilterTerm?> => ColumnRuleFilter::from_rule(f, ColumnRule::Uniqueness(Uniqueness::new(None, None))),
};

pub CreateTableString: bool = {
    r"(?i)CREATE TABLE IF NOT EXISTS" => true,
    r"(?i)CREATE TABLE" => true,
};

pub DataTypeExpr: DataType = {
    <n:Identifier> => DataType::new(n.as_str(), None, None),
    <n:Identifier> "(" <i:uNumber> ")" => DataType::new( n.as_str(), Some(i), None),
    <n:Identifier> "(" <i1:uNumber> "," <i2:uNumber> ")" => DataType::new( n.as_str(), Some(i1), Some(i2)),
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

uNumber: u32 = <s:r"[1-9][0-9]*"> => s.to_owned().parse::<u32>().unwrap();
Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9\-_]*"> => s.to_owned();
Text: String = <s:r#"('[^['"]]+')|("[^['"]]+")"#> => s.to_owned()[1..(s.len()-1)].to_string();
DecimalPercent: f32 = <s:r"(1\.(0*)?)|(0\.[0-9]*)"> => s.parse::<f32>().unwrap();
FilterTerm: String = <s:r"\|[^,]*"> => s.to_owned()[1..].to_string();